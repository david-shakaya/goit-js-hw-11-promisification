{"version":3,"sources":["webpack:///./hw1.js","webpack:///./hw2.js","webpack:///./hw3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","reject","canProcess","id","logSuccess","logError","warn","amount","catch"],"mappings":"0HAGMA,EAAQ,SAACC,GACd,OAAO,IAAIC,SAAQ,SAACC,GACjBC,YAAW,WACTD,EAAQF,KACTA,OAICI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCdXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAEjC,OAAO,IAAIb,SAAQ,SAACC,GAElBA,EAAQW,EAASE,KAAI,SAAAC,GAAI,OACvBA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAM7DZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAG7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCrBnC,IAIIC,EAAK,EAEHc,EAAkB,SAACC,GACvB,IAPiCC,EAAKC,EAOhCvB,GAP2BsB,EAOO,IAPFC,EAOO,IANtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAOpD,OAAO,IAAIpB,SAAQ,SAACC,EAASwB,GAE3B,IAAMC,EAAaJ,KAAKE,SAAW,GACnCtB,YAAW,WAEPwB,IACFzB,EAAQkB,EAAYQ,GAAI7B,GACzBM,EAAON,GAGR2B,EAAON,EAAYQ,MAElB7B,OAMC8B,EAAa,SAACD,GAClBtB,QAAQC,IAAR,eAA2BqB,EAA3B,iBAA8CvB,EAA9C,OAGIyB,EAAW,SAAAF,GACftB,QAAQyB,KAAR,gCAA6CH,EAA7C,8BAGFT,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,KAC/BxB,KAAKqB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,K","file":"main.71c7996915aa6d392d22.js","sourcesContent":["//  // >>>>>>> -  HW -1\r\n\r\n\r\nconst delay = (ms) => {\r\n return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(ms)\r\n   },ms)\r\n })\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n\r\n","// >>>>>>>>>>>> - hw - 2\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  \r\n  return new Promise((resolve) =>{\r\n\r\n    resolve(allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    ))\r\n  })\r\n}\r\n\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n\r\n\r\n","\r\n// >>>>>>>>>>>>> - hw - 3\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nlet time=0\r\n\r\nconst makeTransaction = (transaction) => {\r\n  const delay = randomIntegerFromInterval(200, 500)\r\n  return new Promise((resolve, reject) => {\r\n    \r\n    const canProcess = Math.random() > 0.3;\r\n    setTimeout(() => {\r\n\r\n    if (canProcess) {\r\n      resolve(transaction.id, delay);\r\n     time = delay\r\n    } \r\n\r\n    reject(transaction.id);\r\n\r\n  }, delay);\r\n  })\r\n\r\n};\r\n\r\n\r\nconst logSuccess = (id) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"],"sourceRoot":""}