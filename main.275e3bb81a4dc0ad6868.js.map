{"version":3,"sources":["webpack:///./index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then"],"mappings":"0HAGMA,EAAQ,SAACC,GACd,OAAO,IAAIC,SAAQ,SAACC,GACjBC,YAAW,WACTD,EAAQF,KACTA,OAICI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,K","file":"main.275e3bb81a4dc0ad6868.js","sourcesContent":["//  // >>>>>>> -  HW -1\r\n\r\n\r\nconst delay = (ms) => {\r\n return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(ms)\r\n   },ms)\r\n })\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n\r\n\r\n\r\n// // >>>>>>>>>>>> - hw - 2\r\n\r\n// const users = [\r\n//   { name: 'Mango', active: true },\r\n//   { name: 'Poly', active: false },\r\n//   { name: 'Ajax', active: true },\r\n//   { name: 'Lux', active: false },\r\n// ];\r\n\r\n// const toggleUserState = (allUsers, userName) => {\r\n  \r\n//   return new Promise((resolve) =>{\r\n\r\n//     resolve(allUsers.map(user =>\r\n//       user.name === userName ? { ...user, active: !user.active } : user,\r\n//     ))\r\n//   })\r\n// }\r\n\r\n\r\n// const logger = updatedUsers => console.table(updatedUsers);\r\n\r\n\r\n// toggleUserState(users, 'Mango').then(logger);\r\n// toggleUserState(users, 'Lux').then(logger);\r\n\r\n\r\n\r\n\r\n// // >>>>>>>>>>>>> - hw - 3\r\n\r\n// const randomIntegerFromInterval = (min, max) => {\r\n//   return Math.floor(Math.random() * (max - min + 1) + min);\r\n// };\r\n\r\n// let time=0\r\n\r\n// const makeTransaction = (transaction) => {\r\n//   const delay = randomIntegerFromInterval(200, 500)\r\n//   return new Promise((resolve, reject) => {\r\n    \r\n//     const canProcess = Math.random() > 0.3;\r\n//     setTimeout(() => {\r\n\r\n//     if (canProcess) {\r\n//       resolve(transaction.id, delay);\r\n//      time = delay\r\n//     } \r\n\r\n//     reject(transaction.id);\r\n\r\n//   }, delay);\r\n//   })\r\n\r\n// };\r\n\r\n\r\n// const logSuccess = (id) => {\r\n//   console.log(`Transaction ${id} processed in ${time}ms`);\r\n// };\r\n\r\n// const logError = id => {\r\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n// };\r\n\r\n// makeTransaction({ id: 70, amount: 150 })\r\n//   .then(logSuccess)\r\n//   .catch(logError);\r\n\r\n// makeTransaction({ id: 71, amount: 230 })\r\n//   .then(logSuccess)\r\n//   .catch(logError);\r\n\r\n// makeTransaction({ id: 72, amount: 75 })\r\n//   .then(logSuccess)\r\n//   .catch(logError);\r\n\r\n// makeTransaction({ id: 73, amount: 100 })\r\n//   .then(logSuccess)\r\n//   .catch(logError);"],"sourceRoot":""}